/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef _EI_CLASSIFIER_IMPULSE_8_5_H_
#define _EI_CLASSIFIER_IMPULSE_8_5_H_

#include <stdint.h>
#include "tflite-model/tflite-trained_8_5.h"
#include "edge-impulse-sdk/classifier/ei_model_types.h"

EI_IMPULSE_ERROR run_nn_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug);

namespace namespace_8_5 {

    const char* ei_classifier_inferencing_categories[] = { "idle", "snake", "updown", "wave" };

    const uint16_t ei_classifier_anom_axes[]  { 11, 13, 22 };
        // (before - mean) / scale
    const float ei_classifier_anom_scale[3] = { 3.0927439056568065, 3.0461234144946934, 2.0991919512310218 };
    const float ei_classifier_anom_mean[3] = { 2.8866464025298235, 0.033074806589186545, 2.27055027168039 };

    const ei_classifier_anom_cluster_t ei_classifier_anom_clusters[37] = {
      { ( float[] ) { -0.9317347407341003, -0.5497726202011108, -1.0785892009735107 }, 0.19888205571699907 }
    , { ( float[] ) { 2.7370026111602783, -0.3139142692089081, 1.064890742301941 }, 0.618452212852542 }
    , { ( float[] ) { -0.3282957971096039, -0.20061983168125153, -0.7834387421607971 }, 0.36826080653465676 }
    , { ( float[] ) { -0.06516887247562408, -0.20629258453845978, 0.6285623908042908 }, 0.42976771615011333 }
    , { ( float[] ) { -0.9293787479400635, -0.130916029214859, -1.074297547340393 }, 0.2598337627303242 }
    , { ( float[] ) { -0.458401083946228, 0.0528787262737751, 0.40477490425109863 }, 0.7331900518230949 }
    , { ( float[] ) { -0.4010069966316223, -0.2046179175376892, 2.097045660018921 }, 0.3799008254779938 }
    , { ( float[] ) { -0.5678008794784546, -0.27456310391426086, 1.0224560499191284 }, 0.3967486285238256 }
    , { ( float[] ) { 0.48225468397140503, -0.26493337750434875, 0.020488765090703964 }, 0.3855816795813863 }
    , { ( float[] ) { 2.302248001098633, -0.3114514648914337, -0.07741062343120575 }, 0.4621263386096416 }
    , { ( float[] ) { 0.04976106435060501, -0.20420677959918976, -0.4045812785625458 }, 0.32863377785553083 }
    , { ( float[] ) { -0.894146203994751, 2.7350218296051025, -0.9225788116455078 }, 0.39587483909261145 }
    , { ( float[] ) { 0.0901581346988678, -0.1125861331820488, 0.16999861598014832 }, 0.45403940821380057 }
    , { ( float[] ) { -0.2150600403547287, 0.6924586296081543, -0.48078492283821106 }, 0.8256789167723567 }
    , { ( float[] ) { 3.3311688899993896, -0.46077385544776917, -0.2060655653476715 }, 0.503417005659338 }
    , { ( float[] ) { 0.41163498163223267, 0.09926068037748337, -0.2064644992351532 }, 0.7125646038840431 }
    , { ( float[] ) { -0.04245517775416374, -0.2078372836112976, 1.197269082069397 }, 0.48931621678006365 }
    , { ( float[] ) { 2.162975549697876, -0.36415013670921326, 0.6097515821456909 }, 0.6886894797659945 }
    , { ( float[] ) { -0.3789447247982025, -0.1664891093969345, -0.35395556688308716 }, 0.3876019852625113 }
    , { ( float[] ) { -0.9261732697486877, 0.3914889693260193, -1.0638236999511719 }, 0.4783386480904542 }
    , { ( float[] ) { -0.2956092655658722, -0.16040609776973724, 1.4644221067428589 }, 0.4627477368999208 }
    , { ( float[] ) { 0.16710235178470612, -0.06126612052321434, 2.238208293914795 }, 0.8768554247951243 }
    , { ( float[] ) { -0.24898096919059753, 0.18552157282829285, -0.5220572352409363 }, 0.45617282247812563 }
    , { ( float[] ) { -0.9118571877479553, 1.4421361684799194, -1.0271815061569214 }, 0.6437062360059982 }
    , { ( float[] ) { 2.9920878410339355, -0.4358125329017639, -0.4533889889717102 }, 0.34918743839939087 }
    , { ( float[] ) { 0.6156126260757446, -0.19086205959320068, 0.5003127455711365 }, 0.6885503003946725 }
    , { ( float[] ) { 1.3821873664855957, -0.3961164355278015, -0.045737460255622864 }, 0.45961120996002297 }
    , { ( float[] ) { -0.901289165019989, 16.002262115478516, -0.9784106016159058 }, 0 }
    , { ( float[] ) { -0.7773101329803467, 7.702831268310547, -0.7699465155601501 }, 1.7525116586666623 }
    , { ( float[] ) { 0.10326425731182098, 1.5004239082336426, 1.6235300302505493 }, 0.5284662176724818 }
    , { ( float[] ) { -0.027076615020632744, 0.5969944596290588, 1.8728411197662354 }, 0.6937677948096561 }
    , { ( float[] ) { -0.844777524471283, 3.580911159515381, -0.9157360196113586 }, 0.4854124918702225 }
    , { ( float[] ) { -0.028408586978912354, -0.23600798845291138, 2.9518187046051025 }, 0.4720464763555646 }
    , { ( float[] ) { 0.0861475020647049, 4.383502960205078, 0.842309296131134 }, 0.6857298980552783 }
    , { ( float[] ) { 1.7591607570648193, -0.253592848777771, 3.0111336708068848 }, 0.7339615655562095 }
    , { ( float[] ) { -0.8593080043792725, 5.210899829864502, -0.9111465811729431 }, 0.6023873690789594 }
    , { ( float[] ) { -0.9197426438331604, 18.87964630126953, -1.0759057998657227 }, 0 }
    };

    uint8_t ei_dsp_config_3_axes[] = { 0, 1, 2 };
    const uint32_t ei_dsp_config_3_axes_size = 3;
    ei_dsp_config_spectral_analysis_t ei_dsp_config_3 = {
        2,
        3,
        1.0f,
        "none",
        3.0f,
        6,
        16,
        3,
        0.1f,
        "0.1, 0.5, 1.0, 2.0, 5.0",
        true,
        true
    };

    uint8_t ei_dsp_config_7_axes[] = { 0, 1, 2 };
    const uint32_t ei_dsp_config_7_axes_size = 3;
    ei_dsp_config_flatten_t ei_dsp_config_7 = {
        1,
        3,
        1.0f,
        true,
        true,
        true,
        true,
        true,
        true,
        true
    };

    const size_t ei_dsp_blocks_size = 2;
    ei_model_dsp_t ei_dsp_blocks[ei_dsp_blocks_size] = {
        { // DSP block 3
            33,
            &extract_spectral_analysis_features,
            (void*)&ei_dsp_config_3,
            ei_dsp_config_3_axes,
            ei_dsp_config_3_axes_size
        },
        { // DSP block 7
            21,
            &extract_flatten_features,
            (void*)&ei_dsp_config_7,
            ei_dsp_config_7_axes,
            ei_dsp_config_7_axes_size
        }
    };

    uint8_t ei_learning_block_config_3_axes[] = { 0, 1, 2 };
    const uint32_t ei_learning_block_config_3_axes_size = 3;
    ei_learning_block_config_tflite_graph_t ei_learning_block_config_3 = {
        .implementation_version = 2,
        .axes = 3,
        .tflite_arena_size = 2598,
        .tflite_input_datatype = EI_CLASSIFIER_DATATYPE_INT8,
        .tflite_input_quantized = 1,
        .tflite_input_scale = 0.5589553713798523,
        .tflite_input_zeropoint = -63,
        .tflite_output_datatype = EI_CLASSIFIER_DATATYPE_INT8,
        .tflite_output_quantized = 1,
        .tflite_output_scale = 0.00390625,
        .tflite_output_zeropoint = -128,

        .model_arr = namespace_8_5::trained_tflite,
        .model_arr_size = namespace_8_5::trained_tflite_len,
        .model_input = NULL,
        .model_output = NULL,
        .model_init = NULL,
        .model_invoke = NULL,
        .model_reset = NULL,

    };

    uint8_t ei_learning_block_config_7_axes[] = { 0, 1, 2 };
    const uint32_t ei_learning_block_config_7_axes_size = 3;
    ei_learning_block_config_anomaly_kmeans_t ei_learning_block_config_7 = {
        .implementation_version = 1,
        .anom_axis = namespace_8_5::ei_classifier_anom_axes,
        .anom_axes_size = 3,
        .anom_clusters = namespace_8_5::ei_classifier_anom_clusters,
        .anom_cluster_count = 37,
        .anom_scale = namespace_8_5::ei_classifier_anom_scale,
        .anom_mean = namespace_8_5::ei_classifier_anom_mean,
    };

    const size_t ei_learning_blocks_size = 2;
    ei_learning_block_t ei_learning_blocks[ei_learning_blocks_size] = {
        {   &run_nn_inference,
            (void*)&ei_learning_block_config_3,
            ei_dsp_config_3_axes,
            ei_dsp_config_3_axes_size
        },
        {   &run_kmeans_anomaly,
            (void*)&ei_learning_block_config_7,
            ei_dsp_config_7_axes,
            ei_dsp_config_7_axes_size
        }
    };

    const ei_model_performance_calibration_t ei_calibration = {
        1, /* integer version number */
        false, /* has configured performance calibration */
        (int32_t)(125 / 62.5) * 1000, /* Model window */
        0.8f, /* Default threshold */
        (int32_t)(125 / 62.5) * 500, /* Half of model window */
        0   /* Don't use flags */
    };

} // namespace_8_5 namespace

const ei_impulse_t impulse_8_5 = {
    .project_id = 8,
    .project_owner = "Selenium test runner 5",
    .project_name = "selenium-automated-project-5",
    .deploy_version = 5,

    .nn_input_frame_size = 54,
    .raw_sample_count = 125,
    .raw_samples_per_frame = 3,
    .dsp_input_frame_size = 125 * 3,
    .input_width = 0,
    .input_height = 0,
    .input_frames = 0,
    .interval_ms = 16,
    .frequency = 62.5,
    .dsp_blocks_size = namespace_8_5::ei_dsp_blocks_size,
    .dsp_blocks = namespace_8_5::ei_dsp_blocks,

    .object_detection = 0,
    .object_detection_count = 0,
    .object_detection_threshold = 0,
    .object_detection_last_layer = EI_CLASSIFIER_LAST_LAYER_UNKNOWN,
    .tflite_output_labels_tensor = 0,
    .tflite_output_score_tensor = 0,
    .tflite_output_data_tensor = 0,

    .learning_blocks_size =  namespace_8_5::ei_learning_blocks_size,
    .learning_blocks = namespace_8_5::ei_learning_blocks,

    .inferencing_engine = EI_CLASSIFIER_TFLITE,
    .compiled = 0,
    .has_tflite_ops_resolver = 1,

    .sensor = EI_CLASSIFIER_SENSOR_ACCELEROMETER,
    .fusion_string = "accX + accY + accZ",

    .slice_size = (125/4),
    .slices_per_model_window = 4,

    .label_count = 4,
    .calibration = namespace_8_5::ei_calibration,
    .categories = new const char*[4] { "idle", "snake", "updown", "wave" }
};

#endif // _EI_CLASSIFIER_IMPULSE_8_5_H_
