/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef _EI_CLASSIFIER_MODEL_VARIABLES_H_
#define _EI_CLASSIFIER_MODEL_VARIABLES_H_

#include <stdint.h>
#include "model_metadata.h"
#include "anomaly_clusters.h"
#include "tflite-model/trained_model_compiled_acc.h"
#include "tflite-model/trained_model_compiled_mic.h"
#include "edge-impulse-sdk/classifier/ei_model_types.h"
#include "edge-impulse-sdk/classifier/inferencing_engines/engines.h"

const char* ei_classifier_inferencing_categories_acc[] = { "idle", "snake", "updown", "wave" };
const char* ei_classifier_inferencing_categories_mic[] = { "no", "unknown", "yes" };

uint8_t ei_dsp_config_24_axes[] = { 0, 1, 2 };
const uint32_t ei_dsp_config_24_axes_size = 3;
ei_dsp_config_spectral_analysis_t ei_dsp_config_24 = {
    24, // uint32_t blockId
    2, // int implementationVersion
    3, // int length of axes
    1.0f, // float scale-axes
    1, // int input-decimation-ratio
    "low", // select filter-type
    8.0f, // float filter-cutoff
    6, // int filter-order
    "FFT", // select analysis-type
    64, // int fft-length
    3, // int spectral-peaks-count
    0.1f, // float spectral-peaks-threshold
    "0.1, 0.5, 1.0, 2.0, 5.0", // string spectral-power-edges
    true, // boolean do-log
    true, // boolean do-fft-overlap
    4, // int wavelet-level
    "db4", // select wavelet
    false // boolean extra-low-freq
};

const size_t ei_dsp_blocks_size_acc = 1;
ei_model_dsp_t ei_dsp_blocks_acc[ei_dsp_blocks_size_acc] = {
    { // DSP block 24
        33,
        &extract_spectral_analysis_features,
        (void*)&ei_dsp_config_24,
        ei_dsp_config_24_axes,
        ei_dsp_config_24_axes_size
    }
};

const ei_config_tflite_eon_graph_t ei_config_tflite_graph_acc = {
    .implementation_version = 1,
    .model_init = &trained_model_acc_init,
    .model_invoke = &trained_model_acc_invoke,
    .model_reset = &trained_model_acc_reset,
    .model_input = &trained_model_acc_input,
    .model_output = &trained_model_acc_output,
};

const ei_learning_block_config_tflite_graph_t ei_learning_block_config_acc_0 = {
    .implementation_version = 1,
    .block_id = 0,
    .object_detection = 0,
    .object_detection_last_layer = EI_CLASSIFIER_LAST_LAYER_UNKNOWN,
    .output_data_tensor = 0,
    .output_labels_tensor = 1,
    .output_score_tensor = 2,
    .graph_config = (void*)&ei_config_tflite_graph_acc
};

const ei_learning_block_config_anomaly_kmeans_t ei_learning_block_config_acc_1 = {
    .implementation_version = 1,
    .anom_axis = ei_classifier_anom_axes,
    .anom_axes_size = 4,
    .anom_clusters = ei_classifier_anom_clusters,
    .anom_cluster_count = 32,
    .anom_scale = ei_classifier_anom_scale,
    .anom_mean = ei_classifier_anom_mean,
};

const size_t ei_learning_blocks_size_acc = 2;
const ei_learning_block_t ei_learning_blocks_acc[ei_learning_blocks_size_acc] = {
    {
        &run_nn_inference,
        (void*)&ei_learning_block_config_acc_0,
    },
    {
        &run_kmeans_anomaly,
        (void*)&ei_learning_block_config_acc_1,
    },
};

const ei_model_performance_calibration_t ei_calibration_acc = {
    1, /* integer version number */
    false, /* has configured performance calibration */
    (int32_t)(EI_CLASSIFIER_RAW_SAMPLE_COUNT / ((EI_CLASSIFIER_FREQUENCY > 0) ? EI_CLASSIFIER_FREQUENCY : 1)) * 1000, /* Model window */
    0.8f, /* Default threshold */
    (int32_t)(EI_CLASSIFIER_RAW_SAMPLE_COUNT / ((EI_CLASSIFIER_FREQUENCY > 0) ? EI_CLASSIFIER_FREQUENCY : 1)) * 500, /* Half of model window */
    0   /* Don't use flags */
};


const ei_impulse_t impulse_129038_98 = {
    .project_id = 129038,
    .project_owner = "Dmitry",
    .project_name = "Tutorial: Continuous motion recognition",
    .deploy_version = 98,

    .nn_input_frame_size = 33,
    .raw_sample_count = 125,
    .raw_samples_per_frame = 3,
    .dsp_input_frame_size = 125 * 3,
    .input_width = 0,
    .input_height = 0,
    .input_frames = 0,
    .interval_ms = 16,
    .frequency = 62.5,
    .dsp_blocks_size = ei_dsp_blocks_size_acc,
    .dsp_blocks = ei_dsp_blocks_acc,

    .object_detection = 0,
    .object_detection_count = 0,
    .object_detection_threshold = 0,
    .object_detection_last_layer = EI_CLASSIFIER_LAST_LAYER_UNKNOWN,
    .fomo_output_size = 0,

    .tflite_output_features_count = 4,
    .learning_blocks_size = ei_learning_blocks_size_acc,
    .learning_blocks = ei_learning_blocks_acc,

    .inferencing_engine = EI_CLASSIFIER_TFLITE,

    .quantized = 1,

    .compiled = 1,

    .sensor = EI_CLASSIFIER_SENSOR_ACCELEROMETER,
    .fusion_string = "accX + accY + accZ",
    .slice_size = (125/4),
    .slices_per_model_window = 4,

    .has_anomaly = 1,
    .label_count = 4,
    .calibration = ei_calibration_acc,
    .categories = ei_classifier_inferencing_categories_acc
};

const ei_impulse_t ei_default_impulse = impulse_129038_98;

// Beginning of the second impulse

uint8_t ei_dsp_config_6_axes[] = { 0 };
const uint32_t ei_dsp_config_6_axes_size = 1;
ei_dsp_config_mfcc_t ei_dsp_config_6 = {
    6, // uint32_t blockId
    3, // int implementationVersion
    1, // int length of axes
    10, // int num_cepstral
    0.02f, // float frame_length
    0.02f, // float frame_stride
    16, // int num_filters
    128, // int fft_length
    25, // int win_size
    50, // int low_frequency
    2000, // int high_frequency
    0.98f, // float pre_cof
    1 // int pre_shift
};

const size_t ei_dsp_blocks_size_mic = 1;
ei_model_dsp_t ei_dsp_blocks_mic[ei_dsp_blocks_size_mic] = {
    { // DSP block 6
        500,
        &extract_mfcc_features,
        (void*)&ei_dsp_config_6,
        ei_dsp_config_6_axes,
        ei_dsp_config_6_axes_size
    }
};

const ei_config_tflite_eon_graph_t ei_config_tflite_graph_mic_0 = {
    .implementation_version = 1,
    .model_init = &trained_model_mic_init,
    .model_invoke = &trained_model_mic_invoke,
    .model_reset = &trained_model_mic_reset,
    .model_input = &trained_model_mic_input,
    .model_output = &trained_model_mic_output,
};

const ei_learning_block_config_tflite_graph_t ei_learning_block_config_mic_0 = {
    .implementation_version = 1,
    .block_id = 0,
    .object_detection = 0,
    .object_detection_last_layer = EI_CLASSIFIER_LAST_LAYER_UNKNOWN,
    .output_data_tensor = 0,
    .output_labels_tensor = 1,
    .output_score_tensor = 2,
    .graph_config = (void*)&ei_config_tflite_graph_mic_0
};

const size_t ei_learning_blocks_size_mic = 1;
const ei_learning_block_t ei_learning_blocks_mic[ei_learning_blocks_size_mic] = {
    {
        &run_nn_inference,
        (void*)&ei_learning_block_config_mic_0,
    },
};

const ei_model_performance_calibration_t ei_calibration_mic = {
    1, /* integer version number */
    true, /* has configured performance calibration */
    533, /* average duration window ms */
    0.3646317894056652, /* detection threshold */
    792,  /* suppression ms */
    0x5, /* suppression flags */
};


const ei_impulse_t impulse_91810_25 = {
    .project_id = 91810,
    .project_owner = "Dmitry",
    .project_name = "mic_keyword_mfcc",
    .deploy_version = 25,

    .nn_input_frame_size = 500,
    .raw_sample_count = 16000,
    .raw_samples_per_frame = 1,
    .dsp_input_frame_size = 16000 * 1,
    .input_width = 0,
    .input_height = 0,
    .input_frames = 0,
    .interval_ms = 0.0625,
    .frequency = 16000,
    .dsp_blocks_size = ei_dsp_blocks_size_mic,
    .dsp_blocks = ei_dsp_blocks_mic,

    .object_detection = 0,
    .object_detection_count = 0,
    .object_detection_threshold = 0,
    .object_detection_last_layer = EI_CLASSIFIER_LAST_LAYER_UNKNOWN,
    .fomo_output_size = 0,

    .tflite_output_features_count = 3,
    .learning_blocks_size = ei_learning_blocks_size_mic,
    .learning_blocks = ei_learning_blocks_mic,

    .inferencing_engine = EI_CLASSIFIER_TFLITE,

    .quantized = 1,

    .compiled = 1,

    .sensor = EI_CLASSIFIER_SENSOR_MICROPHONE,
    .fusion_string = "audio",
    .slice_size = (16000/4),
    .slices_per_model_window = 4,

    .has_anomaly = 0,
    .label_count = 3,
    .calibration = ei_calibration_mic,
    .categories = ei_classifier_inferencing_categories_mic
};

#endif // _EI_CLASSIFIER_MODEL_METADATA_H_
